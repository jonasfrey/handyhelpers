diff --git a/localhost/classes.module.js b/localhost/classes.module.js
index e510521..8704d94 100644
--- a/localhost/classes.module.js
+++ b/localhost/classes.module.js
@@ -1,3 +1,62 @@
+class O_cpu_stats__diff{
+    constructor(
+        o_cpu_stats_1, 
+        o_cpu_stats_2, 
+    ){
+        if(o_cpu_stats_1.n_ms_window_performance_now < o_cpu_stats_2.n_ms_window_performance_now){
+            this.o_cpu_stats_old = o_cpu_stats_1
+            this.o_cpu_stats_new = o_cpu_stats_2
+        }else{
+            this.o_cpu_stats_old = o_cpu_stats_2
+            this.o_cpu_stats_new = o_cpu_stats_1
+        }
+
+        for(let s_prop of Object.keys(this.o_cpu_stats_old)){
+            if(s_prop.startsWith('n_')){
+                this[`n_diff_${s_prop}`] = this.o_cpu_stats_old[s_prop] - this.o_cpu_stats_new[s_prop]
+            }
+        }
+        this.a_o_cpu_core_stats__diff =this.o_cpu_stats_old.a_o_cpu_core_stats.map(
+            (o_old, n_idx) =>{
+                return new O_cpu_core_stats__diff(
+                    o_old,
+                    this.o_cpu_stats_new.a_o_cpu_core_stats[n_idx]
+                )
+            }
+        )
+
+    }
+}
+class O_cpu_core_stats__diff{
+    // the cpu usage can be read out for a certain timespan
+    // because in the /proc/stat file there are time values 
+    // the values must be readout twice , with the difference 
+    // of the values the cpu usage of the last n-milliseconds
+    // can be calculated
+    // the default milliseconds is chosen very short so that 
+    constructor(
+        o_cpu_core_stats_old, 
+        o_cpu_core_stats_new, 
+    ){
+        this.o_cpu_core_stats_old = o_cpu_core_stats_old
+        this.o_cpu_core_stats_new = o_cpu_core_stats_new
+
+        for(let s_prop of Object.keys(this.o_cpu_core_stats_old)){
+            if(s_prop.startsWith('n_')){
+                this[`n_diff_${s_prop}`] = this.o_cpu_core_stats_old[s_prop] - this.o_cpu_core_stats_new[s_prop]
+            }
+        }
+
+        // o_cpu_stats
+        // this.n_total = this.n_niced_processes_executing_in_user_mode 
+        //     + this.n_niced_processes_executing_in_user_mode
+        //     + this.n_processes_executing_in_kernel_mode
+        //     + this.n_io_wait
+        //     + this.n_servicing_softirqs
+        //     this.n_usage_nor = this.n_idle / this.n_total 
+
+    }
+}
 class O_cpu_stats{
     constructor(
         s_proc_stat,
@@ -8,10 +67,11 @@ class O_cpu_stats{
         n_processes_running,
         n_processes_blocked_waiting_for_io_to_complete,
         s_softirqs,
-        s_lscpu,
         a_o_cpu_core_stats, 
-        o_cpu_core_stats__total
+        o_cpu_core_stats__total, 
+        n_len_max__a_o_cpu_stats
     ){
+        this.n_ts_ms = new Date().getTime()
         this.n_ms_window_performance_now = window.performance.now()
         this.a_o_cpu_stats = [];
         this.s_proc_stat = s_proc_stat,
@@ -22,9 +82,9 @@ class O_cpu_stats{
         this.n_processes_running = n_processes_running,
         this.n_processes_blocked_waiting_for_io_to_complete = n_processes_blocked_waiting_for_io_to_complete,
         this.s_softirqs = s_softirqs,
-        this.s_lscpu = s_lscpu
         this.a_o_cpu_core_stats = a_o_cpu_core_stats
         this.o_cpu_core_stats__total = o_cpu_core_stats__total
+        this.n_len_max__a_o_cpu_stats = n_len_max__a_o_cpu_stats
         //getconf CLK_TCK
     }
     get n_cpus(){
@@ -35,26 +95,24 @@ class O_cpu_core_stats{
     constructor(
         o_cpu_stats,
         s, 
-        n_ms_time_spent_processes_executing_in_user_mode,
-        n_ms_time_spent_niced_processes_executing_in_user_mode,
-        n_ms_time_spent_processes_executing_in_kernel_mode,
-        n_ms_time_spent_idle, 
-        n_ms_time_spent_io_wait,
-        n_ms_time_spent_servicing_interrupts,
-        n_ms_time_spent_servicing_softirqs
+        n_time_spent_processes_executing_in_user_mode,
+        n_time_spent_niced_processes_executing_in_user_mode,
+        n_time_spent_processes_executing_in_kernel_mode,
+        n_time_spent_idle, 
+        n_time_spent_io_wait,
+        n_time_spent_servicing_interrupts,
+        n_time_spent_servicing_softirqs
     ){
         this.o_cpu_stats = o_cpu_stats
         this.s = s
         // the times listed here 
-        this.n_ms_time_spent_since_boot_processes_executing_in_user_mode = n_ms_time_spent_processes_executing_in_user_mode,
-        this.n_ms_time_spent_since_boot_niced_processes_executing_in_user_mode = n_ms_time_spent_niced_processes_executing_in_user_mode,
-        this.n_ms_time_spent_since_boot_processes_executing_in_kernel_mode = n_ms_time_spent_processes_executing_in_kernel_mode,
-        this.n_ms_time_spent_since_boot_idle = n_ms_time_spent_idle, 
-        this.n_ms_time_spent_since_boot_io_wait = n_ms_time_spent_io_wait,
-        this.n_ms_time_spent_since_boot_servicing_interrupts = n_ms_time_spent_servicing_interrupts,
-        this.n_ms_time_spent_since_boot_servicing_softirqs = n_ms_time_spent_servicing_softirqs
-
-
+        this.n_time_spent_since_boot_processes_executing_in_user_mode = n_time_spent_processes_executing_in_user_mode,
+        this.n_time_spent_since_boot_niced_processes_executing_in_user_mode = n_time_spent_niced_processes_executing_in_user_mode,
+        this.n_time_spent_since_boot_processes_executing_in_kernel_mode = n_time_spent_processes_executing_in_kernel_mode,
+        this.n_time_spent_since_boot_idle = n_time_spent_idle, 
+        this.n_time_spent_since_boot_io_wait = n_time_spent_io_wait,
+        this.n_time_spent_since_boot_servicing_interrupts = n_time_spent_servicing_interrupts,
+        this.n_time_spent_since_boot_servicing_softirqs = n_time_spent_servicing_softirqs
     }
 }
 
diff --git a/localhost/module.js b/localhost/module.js
index 5b8a0f3..0c6d6ac 100755
--- a/localhost/module.js
+++ b/localhost/module.js
@@ -3,8 +3,47 @@ import { O_cpu_core_stats, O_cpu_stats } from "./classes.module.js";
 let f_b_denojs = function(){
     return 'Deno' in window
 }
+let f_s_lscpu = async function(){
+    return new Promise(
+        async (f_res, f_rej)=>{
+            let s_command = 'lscpu'
+            let a_s_arg = s_command.split(' ');
+            const o_command = new Deno.Command(
+                a_s_arg.shift(),
+                {args: a_s_arg}
+            );
+            const { code, stdout, stderr } = await o_command.output();
+            if(code === 0){
+                return f_res(new TextDecoder().decode(stdout))
+            }
+
+            // console.assert(code === 0);
+            // console.assert("hello\n" === new TextDecoder().decode(stdout));
+            // console.assert("world\n" === new TextDecoder().decode(stderr));
+            return f_rej(`could not run ${s_command}`)
+        }
+
+    )
+}
+let a_o_cpu_stats = [];
+let f_o_cpu_stats__diff = async function(
+    n_ms_diff_max
+){
+    let n_ms_precision = 50;
+    let o_cpu_stats__last = a_o_cpu_stats?.at(-1);
+    let n_ms_diff = (window.performance.now()-o_cpu_stats__last.n_ms_window_performance_now) 
+    if(
+        !o_cpu_stats__last
+        || n_ms_diff > n_ms_diff_max + n_ms_precision
+            ){
+        a_o_cpu_stats.push(
+            await f_o_cpu_stats();
+        )
+    }
+}
 let f_o_cpu_stats__from_s_proc_stat = function(
-    s_proc_stat
+    s_proc_stat, 
+    n_time_unit_user_hz
 ){
     
     // console.log(s_proc_stat.split('\n'));
@@ -26,7 +65,7 @@ let f_o_cpu_stats__from_s_proc_stat = function(
     ).filter(v=>v)
 
     // console.log(a_s_cpu)
-    let o = new O_cpu_stats(
+    let o_cpu_stats = new O_cpu_stats(
         s_proc_stat, 
         (n_time_unit_user_hz) ? n_time_unit_user_hz : 100,//assuming 100
         a_s.filter(s=>s.startsWith('ctxt')).map(s=>parseInt(s.split(' ').pop())),
@@ -35,47 +74,17 @@ let f_o_cpu_stats__from_s_proc_stat = function(
         a_s.filter(s=>s.startsWith('procs_running')).map(s=>parseInt(s.split(' ').pop())),
         a_s.filter(s=>s.startsWith('procs_blocked')).map(s=>parseInt(s.split(' ').pop())),
         a_s.filter(s=>s.startsWith('softirq')).map(s=>parseInt(s.split(' ').pop())),
-        (()=>{
-            return new Promise(
-                async (f_res, f_rej)=>{
-                    let s_command = 'lscpu'
-                    let a_s_arg = s_command.split(' ');
-                    const o_command = new Deno.Command(
-                        a_s_arg.shift(),
-                        {args: a_s_arg}
-                    );
-                    const { code, stdout, stderr } = await o_command.output();
-                    if(code === 0){
-                        return f_res(new TextDecoder().decode(stdout))
-                    }
-    
-                    // console.assert(code === 0);
-                    // console.assert("hello\n" === new TextDecoder().decode(stdout));
-                    // console.assert("world\n" === new TextDecoder().decode(stderr));
-                    return f_rej(`could not run ${s_command}`)
-                }
 
-            )
-        })(),
         a_o_cpu_core_stats,
         o_cpu_core_stats__total
     )
-    let f_n_usage_nor = function(
-        n_ms = 100
-    ){
 
-        this.n_total = this.n_niced_processes_executing_in_user_mode 
-            + this.n_niced_processes_executing_in_user_mode
-            + this.n_processes_executing_in_kernel_mode
-            + this.n_io_wait
-            + this.n_servicing_softirqs
-            this.n_usage_nor = this.n_idle / this.n_total 
-    }
 
-    console.log(o);
-    return o
+    return o_cpu_stats
 }
-let f_o_cpu_stats = async function(){
+let f_o_cpu_stats = async function(
+    n_time_unit_user_hz
+){
     let s_path = '/proc/stat'
     let s_proc_stat = '';
     let n = window.performance.now();
@@ -86,96 +95,10 @@ let f_o_cpu_stats = async function(){
     }
     // console.log(window.performance.now()-n)
     console.log(s_proc_stat.split('\n'));
-    let a_s = s_proc_stat.split('\n');
-    let a_s_cpu = a_s.filter(s=>s.startsWith('cpu'));
-    let o_cpu_core_stats__total = null;
-    let a_o_cpu_core_stats = a_s_cpu.map(
-        s=>{
-
-            let a_s = s.split(' ').filter(v=>v.trim()!='');
-            // console.log(a_s.slice(1).map(s=>parseInt(s)))
-            let o = new O_cpu_core_stats(s,...a_s.slice(1).map(s=>parseInt(s)))
-            if(! /\d/.test(a_s[0])){
-                o_cpu_core_stats__total = o;
-                return false
-            }
-            return o
-        }
-    ).filter(v=>v)
-    let n_time_unit_user_hz = await (()=>{
-        return new Promise(
-            async (f_res, f_rej)=>{
-                let s_command = 'getconf CLK_TCK'
-                let a_s_arg = s_command.split(' ');
-                const o_command = new Deno.Command(
-                    a_s_arg.shift(),
-                    {args: a_s_arg}
-                );
-                const { code, stdout, stderr } = await o_command.output();
-                let s_stdout = new TextDecoder().decode(stdout)
-                let s_stderr = new TextDecoder().decode(stderr)
-                let n_code= code;
-                if(n_code === 0){
-                    return f_res(parseInt(s_stdout))
-                }
-
-                // console.assert(code === 0);
-                // console.assert("hello\n" === new TextDecoder().decode(stdout));
-                // console.assert("world\n" === new TextDecoder().decode(stderr));
-                return f_rej(`could not run ${s_command}, stdout: ${s_stdout}, stderr:${s_stderr}, code:${n_code}`)
-            }
-
-        )
-    })()
-    // console.log(a_s_cpu)
-    let o = new O_cpu_stats(
+    return f_o_cpu_stats__from_s_proc_stat(
         s_proc_stat, 
-        (n_time_unit_user_hz) ? n_time_unit_user_hz : 100,//assuming 100
-        a_s.filter(s=>s.startsWith('ctxt')).map(s=>parseInt(s.split(' ').pop())),
-        a_s.filter(s=>s.startsWith('btime')).map(s=>parseInt(s.split(' ').pop())),
-        a_s.filter(s=>s.startsWith('processes')).map(s=>parseInt(s.split(' ').pop())),
-        a_s.filter(s=>s.startsWith('procs_running')).map(s=>parseInt(s.split(' ').pop())),
-        a_s.filter(s=>s.startsWith('procs_blocked')).map(s=>parseInt(s.split(' ').pop())),
-        a_s.filter(s=>s.startsWith('softirq')).map(s=>parseInt(s.split(' ').pop())),
-        (()=>{
-            return new Promise(
-                async (f_res, f_rej)=>{
-                    let s_command = 'lscpu'
-                    let a_s_arg = s_command.split(' ');
-                    const o_command = new Deno.Command(
-                        a_s_arg.shift(),
-                        {args: a_s_arg}
-                    );
-                    const { code, stdout, stderr } = await o_command.output();
-                    if(code === 0){
-                        return f_res(new TextDecoder().decode(stdout))
-                    }
-    
-                    // console.assert(code === 0);
-                    // console.assert("hello\n" === new TextDecoder().decode(stdout));
-                    // console.assert("world\n" === new TextDecoder().decode(stderr));
-                    return f_rej(`could not run ${s_command}`)
-                }
-
-            )
-        })(),
-        a_o_cpu_core_stats,
-        o_cpu_core_stats__total
+        n_time_unit_user_hz
     )
-    let f_n_usage_nor = function(
-        n_ms = 100
-    ){
-
-        this.n_total = this.n_niced_processes_executing_in_user_mode 
-            + this.n_niced_processes_executing_in_user_mode
-            + this.n_processes_executing_in_kernel_mode
-            + this.n_io_wait
-            + this.n_servicing_softirqs
-            this.n_usage_nor = this.n_idle / this.n_total 
-    }
-
-    console.log(o);
-    return o
 
 }
 let f_s_n_beautified = function(
@@ -709,6 +632,7 @@ export {
     f_n_idx_ensured_inside_array, 
     f_move_v_in_array, 
     f_swap_v_in_array, 
-    f_a_a_v__combinations
+    f_a_a_v__combinations, 
+    a_o_cpu_stats
 }
 
